#!/bin/bash +x
####################
[ ! -e "config" ] &&  exit
[ ! -e "../common.properties" ] &&  exit
[ ! -e "../project.properties" ] &&  exit

source <( sed 's/=/="/g' config | sed -r 's/$/"/g' )
if [ -z "$NAME" ] ; then
  exit
fi
source "../common.properties"
source "../project.properties"

verbose=false
host='127.0.0.1'
options=()
while getopts vr OPTION
do
  case $OPTION in
    v)
      verbose=true
      shift
      ;;
    r)
      host=$( host ${GIT_REPO_NAME} | grep -oP '([0-9]{1,3}\.){3}[0-9]{1,3}' )
      shift
      ;;
    *)
      ;;
  esac
done

function echoERR() {
  printf "%s\n" "$*" >&2;
}

if [ -z ${host} ] ; then
  echo 'can not resolve host'
  host='120.138.22.92' 
fi

endpoint="http://${host}:8080/exist/rest/db"
$verbose  && echo "endpoint [ ${endpoint} ]"
auth="admin:${GITHUB_ACCESS_TOKEN}"
$verbose  && echo "auth [ ${auth} ]"
contentType='Content-Type: application/xml'
$verbose  && echo "content-type[ ${contentType} ]"
$verbose  && echo "auth[ ${auth} ]"
max='1'
postData="$(
cat <<EOF
<query xmlns='http://exist.sourceforge.net/NS/exist'
 start='1'
 wrap='no'
 max='99'>
<text><![CDATA[
xquery version '3.1';
declare namespace output = 'http://www.w3.org/2010/xslt-xquery-serialization';
declare option output:method 'text';
declare option output:media-type 'text/plain';
declare option output:item-separator '&#10;';
declare option output:encoding 'UTF-8';
(
'eXist version: ' ||  system:get-version() || '&#10;' ,
'eXist home:    ' ||  system:get-exist-home() || '&#10;' ,
'free memory:   ' || system:get-memory-free() || '&#10;' ,
'date time      ' ||  util:system-dateTime() || '&#10;' ,
if(not(sm:user-exists('${GIT_USER}'))) then (sm:create-account('${GIT_USER}','${GITHUB_ACCESS_TOKEN}','dba')) else (),
if(sm:user-exists('${GIT_USER}')) then ('${GIT_USER} account enabled: ' || sm:is-account-enabled('${GIT_USER}') || '&#10;') else (),
if(sm:user-exists('${GIT_USER}')) then ('${GIT_USER} is dba: ' || sm:is-dba('${GIT_USER}') || '&#10;') else (),
if(sm:user-exists('${GIT_USER}')) then ('${GIT_USER} primary group: ' || sm:get-user-primary-group('${GIT_USER}') || '&#10;') else (),
if(sm:user-exists('${GIT_USER}')) then ('${GIT_USER} groups: ' || string-join( sm:get-user-groups('${GIT_USER}'), ', ' )
|| '&#10;') else (),
'admin user groups:  ' ||  string-join( sm:get-user-groups('admin'), ', ' ) || '&#10;' ,
'dba group members:  ' ||  string-join( sm:get-group-members('dba'), ', ' ) || '&#10;'
)
]]></text>
</query>
EOF
)"

$verbose  && echo "${postData}"

curl -s \
 -u "$auth" \
 -H "$contentType" \
 -d "$postData" \
 $endpoint


