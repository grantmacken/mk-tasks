#!/bin/bash +x
####################
[ ! -e config ] &&  exit
# clean up config before read source
sed -i '/^[[:space:]]*$/d;s/[[:space:]]*$//' config
source <( sed 's/=/="/g' config | sed -r 's/$/"/g' )
[ ! -e "../common.properties" ] &&  exit
source ../common.properties
[ ! -e "../project.properties" ] &&  exit
source ../project.properties
# NOTE! xQuery matches uses regex 
verbose=false
host=127.0.0.1
while getopts "v" OPTION; do
  case ${OPTION} in
    v)
      verbose=true
      ;;
    *)
      ;;
  esac
done
shift $((OPTIND -1))


function echoERR() {
  printf "%s\n" "$*" >&2;
}

if [ $# -ne 1 ]; then
  echoERR  'usage: requires 1 param [ file ]'
  exit 1
fi
if [ ! -e ${1} ]; then
  echoERR  "file does not exist"
  exit 1
fi 

function getMimeType( ){
saxonQuery  "doc('file:///${EXIST_HOME}/mime-types.xml')//mime-type[matches(./extensions,'(^\\.${1},)|,\\.${1},|\\.${1}$')]/@name/string()"
}

function saxonQuery(){
java -cp $SAXON \
  net.sf.saxon.Query \
  \!method=text \
  -qversion:3.0 \
  -qs:"${1}"
}

# $verbose  && echo "SAXON [ ${SAXON} ]"
# $verbose  && echo "EXIST HOME  [ ${EXIST_HOME} ]"
domain="${NAME}"
$verbose  && echo "domain [ ${domain} ]"
absPath=$(readlink -f $1)
relPath=${absPath#*${domain}/} 
baseName=$(basename $relPath)
if [ -z $(echo "$relPath" | cut -d'/' -f1 | grep 'build' ) ]; then
   echoERR 'must store from build dir'
   exit 1
fi

$verbose  && echo "abs-path [ ${absPath} ]"
$verbose  && echo "rel-path [ ${relPath} ]"
$verbose  && echo "base name [ ${baseName} ]"
route="xmldb:exist:///db/apps/${NAME}"
$verbose  && echo "route [ ${route} ]"
# directory="${absPath%${NAME}*}${NAME}/"
directory="$(pwd)/build"
$verbose  && echo "directory [ ${directory} ]"
pattern=${absPath#*build/}
$verbose  && echo "pattern [ ${pattern} ]"

ext=${baseName##*.}
$verbose  && echo "ext [ ${ext} ]"

if [[ ($ext == 'svgz') || ($ext == 'gz') ]]; then
 mimeType='application/zip'
else 
  mimeType="$( getMimeType ${ext})"
fi
# TODO! saxon will throw error if mimetype not found
$verbose  && echo "mimeType [ ${mimeType} ]"

max='1'
postData="$(
cat <<EOF
<query xmlns='http://exist.sourceforge.net/NS/exist'
 start='1'
 wrap='no'
 max='${max}'>
<text><![CDATA[
xquery version '3.1';
xmldb:store-files-from-pattern('${route}','${directory}','$pattern','${mimeType}', true())
]]></text>
</query>
EOF
)"
$verbose  && echo "${postData}"

endpoint="https://${NAME}/exist"
# $verbose  && echo "endpoint [ ${endpoint} ]"
auth="Authorization: Bearer ${SITE_ACCESS_TOKEN}" 
# $verbose  && echo "auth [ ${auth} ]"
contentType='Content-Type: application/xml'
$verbose  && echo "content-type[ ${contentType} ]"

result=$(curl -s --http1.1 \
 -H "$auth" \
 -H "$contentType" \
 -d "$postData" \
 $endpoint)

echo $result

if [ -z "${result}" ]; then 
 echoERR "${relPath}:1:1:E: eXist could not store file"
 exit 1
else
  sleep 1
  exit 0
fi




