#!/bin/bash +x
####################

[ ! -e "config" ] &&  exit
source <( sed 's/=/="/g' config | sed -r 's/$/"/g' )
[ ! -e "../common.properties" ] &&  exit
source ../common.properties
[ ! -e "../project.properties" ] &&  exit
source ../project.properties

echoERR() { printf "%s\n" "$*" >&2; }

verbose=false
 # params=( file )
ARGS_COUNT=$#
action=
version=
downloadURL=
gh get-latest-release
downloadURL="$( gh info-asset-download-url )"
case $1 in
  install)
    version=$( echo "$( gh info-release-tag-name )" | sed 's/v//' )
    # installString="repo:install-and-deploy('${GIT_REPO_NAME}','${version}','${downloadURL}')/*/@result/string()"
    action=$1
    $verbose && echo "download url[ ${downloadURL} ]"
    $verbose && echo "version [ ${version} ]"
    shift
    ;;
  remove)
    action=$1
    # action="'remove ${GIT_REPO_NAME} : ', repo:remove('${GIT_REPO_NAME}'),'&#10;',"
    shift
    ;;
  list)
    action=$1
    # action="'eXist version: ' ||  system:get-version() || '&#10;',"
    shift
    ;;
esac

if [ -z "${action}" ]; then
  echoERR 'usage: 1 param required either ( install, remove or list ) '
  exit 1
fi

endpoint="https://${NAME}/exist"
$verbose  && echo "endpoint [ ${endpoint} ]"
auth="Authorization: Bearer ${SITE_ACCESS_TOKEN}" 
# $verbose  && echo "auth [ ${auth} ]"
contentType='Content-Type: application/xml'
$verbose  && echo "content-type[ ${contentType} ]"
downloadurl=$( gh info-asset-download-url )
version=$( echo "$( gh info-release-tag-name )" | sed 's/v//' )
max='99'
postData="$(
cat <<EOF
<query xmlns='http://exist.sourceforge.net/NS/exist'
 start='1'
 wrap='no'
 max='${max}'>
<text><![CDATA[
xquery version '3.1';
(
'repo download url: ${downloadURL} &#10;' ,
'repo name: ${GIT_REPO_NAME} &#10;' ,
'repo version: ${version} &#10;' ,
'repo root: ' || repo:get-root() || '&#10;' ,
if( '${action}' eq 'list' ) then (  '${action} &#10;' )
else if( '${action}' eq 'remove' ) then (
  let \$action := repo:remove('${GIT_REPO_NAME}')
  return  '${action} ${GIT_REPO_NAME} : ' || string(\$action) )
else if( '${action}' eq 'install' ) then (
   repo:install-and-deploy('${GIT_REPO_NAME}','${version}',xs:anyURI('${downloadurl}')) 
  )
else (),
'&#10;repo list:&#10;=========&#10;'  || \
  string-join(repo:list() , '&#10;' ) || '&#10;' ,
'&#10;restxq uri:&#10;=========&#10;'  || \
 string-join( distinct-values( rest:resource-functions()//*/@xquery-uri/string() ) , '&#10;' ) || '&#10;' 
)
]]></text>
</query>
EOF
)"

curl -s --http1.1 \
 -H "$auth" \
 -H "$contentType" \
 -d "$postData" \
 $endpoint

